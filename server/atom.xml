<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tiger's Corner</title>
 <link href="http://jackjhy.github.io/" rel="self"/>
 <link href="http://jackjhy.github.io"/>
 <updated>2013-10-12T13:20:06+08:00</updated>
 <id>http://jackjhy.github.io</id>
 <author>
   <name>Tiger Ji</name>
   <email>jackjhy@gmail.com</email>
 </author>

 
 <entry>
   <title>Spake計算流程詳細分析</title>
   <link href="http://jackjhy.github.io/2013/10/12/spake"/>
   <updated>2013-10-12T00:00:00+08:00</updated>
   <id>http://jackjhy.github.io/2013/10/12/spake</id>
   <content type="html">&lt;h1&gt;概述&lt;/h1&gt;

&lt;p&gt;对于一个分布式的计算系统来说，一般而言，都可以从两个方面来描述：
- 计算任务的管理维护（划分，分配，监控），简而言之，一个任务的管理调度模块
- 任务的计算执行模块&lt;/p&gt;

&lt;p&gt;参考这个逻辑，Spark也可以从这两个方面来做比较深入的分析，去领悟RDD设计的巧妙，并且与Hadoop等其他分布式系统相关组件进行对照。&lt;/p&gt;

&lt;h2&gt;任务调度&lt;/h2&gt;

&lt;p&gt;Spark中的术语叫做Driver Program，它是一个单独的JVM应用，跑在独立的虚拟机进程上，通过main方法启动。以example源码中SparkPi为例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Computes an approximation to pi */
object SparkPi {
        def main(args: Array[String]) {
                if (args.length == 0) {
                        System.err.println(&amp;quot;Usage: SparkPi &amp;lt;master&amp;gt; [&amp;lt;slices&amp;gt;]&amp;quot;)
                                System.exit(1)
                }
                val spark = new SparkContext(args(0), &amp;quot;SparkPi&amp;quot;,
                                System.getenv(&amp;quot;SPARK_HOME&amp;quot;), Seq(System.getenv(&amp;quot;SPARK_EXAMPLES_JAR&amp;quot;)))
                        val slices = if (args.length &amp;gt; 1) args(1).toInt else 2
                        val n = 100000 * slices
                        val count = spark.parallelize(1 to n, slices).map { i =&amp;gt;
                                val x = random * 2 - 1
                                        val y = random * 2 - 1
                                        if (x*x + y*y &amp;lt; 1) 1 else 0
                        }.reduce(_ + _)
                println(&amp;quot;Pi is roughly &amp;quot; + 4.0 * count / n)
                        System.exit(0)
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么在Driver应用内部，包含哪些组件，并如何协作？
在上面的example代码中，看到SparkContext是应用入口，接下来，我们就在SparkContext内部做一个走马观花的黄金周大游行。
SparkContext由一个class和伴生对象组成（这是scala语言的特性，相当于java中类中间吧static method单独抽出来放到一起。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create and start the scheduler
private var taskScheduler: TaskScheduler = {
        // Regular expression used for local[N] master format
        val LOCAL_N_REGEX = &amp;quot;&amp;quot;&amp;quot;local\[([0-9]+)\]&amp;quot;&amp;quot;&amp;quot;.r
                // Regular expression for local[N, maxRetries], used in tests with failing tasks
                val LOCAL_N_FAILURES_REGEX = &amp;quot;&amp;quot;&amp;quot;local\[([0-9]+)\s*,\s*([0-9]+)\]&amp;quot;&amp;quot;&amp;quot;.r
                // Regular expression for simulating a Spark cluster of [N, cores, memory] locally
                val LOCAL_CLUSTER_REGEX = &amp;quot;&amp;quot;&amp;quot;local-cluster\[\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*]&amp;quot;&amp;quot;&amp;quot;.r
                // Regular expression for connecting to Spark deploy clusters
                val SPARK_REGEX = &amp;quot;&amp;quot;&amp;quot;(spark://.*)&amp;quot;&amp;quot;&amp;quot;.r
                //Regular expression for connection to Mesos cluster
                val MESOS_REGEX = &amp;quot;&amp;quot;&amp;quot;(mesos://.*)&amp;quot;&amp;quot;&amp;quot;.r

                master match {
                        //...省略...
                        case LOCAL_CLUSTER_REGEX(numSlaves, coresPerSlave, memoryPerSlave) =&amp;gt;
                                // Check to make sure memory requested &amp;lt;= memoryPerSlave. Otherwise Spark will just hang.
                                val memoryPerSlaveInt = memoryPerSlave.toInt
                                if (SparkContext.executorMemoryRequested &amp;gt; memoryPerSlaveInt) {
                                        throw new SparkException(
                                                        &amp;quot;Asked to launch cluster with %d MB RAM / worker but requested %d MB/worker&amp;quot;.format(
                                                                memoryPerSlaveInt, SparkContext.executorMemoryRequested))
                                }

                        val scheduler = new ClusterScheduler(this)
                                val localCluster = new LocalSparkCluster(
                                                numSlaves.toInt, coresPerSlave.toInt, memoryPerSlaveInt)
                                val sparkUrl = localCluster.start()
                                val backend = new SparkDeploySchedulerBackend(scheduler, this, sparkUrl, appName)
                                scheduler.initialize(backend)
                                backend.shutdownCallback = (backend: SparkDeploySchedulerBackend) =&amp;gt; {
                                        localCluster.stop()
                                }
                        scheduler

                        case &amp;quot;yarn-standalone&amp;quot; =&amp;gt;
                                val scheduler = try {
                                        val clazz = Class.forName(&amp;quot;org.apache.spark.scheduler.cluster.YarnClusterScheduler&amp;quot;)
                                                val cons = clazz.getConstructor(classOf[SparkContext])
                                                cons.newInstance(this).asInstanceOf[ClusterScheduler]
                                } catch {
                                        // TODO: Enumerate the exact reasons why it can fail
                                        // But irrespective of it, it means we cannot proceed !
                                        case th: Throwable =&amp;gt; {
                                                         throw new SparkException(&amp;quot;YARN mode not available ?&amp;quot;, th)
                                                 }
                                }
                                val backend = new StandaloneSchedulerBackend(scheduler, this.env.actorSystem)
                                        scheduler.initialize(backend)
                                        scheduler

                                        case _ =&amp;gt;
                                        if (MESOS_REGEX.findFirstIn(master).isEmpty) {
                                                logWarning(&amp;quot;Master %s does not match expected format, parsing as Mesos URL&amp;quot;.format(master))
                                        }
                                MesosNativeLibrary.load()
                                        val scheduler = new ClusterScheduler(this)
                                        val coarseGrained = System.getProperty(&amp;quot;spark.mesos.coarse&amp;quot;, &amp;quot;false&amp;quot;).toBoolean
                                        val masterWithoutProtocol = master.replaceFirst(&amp;quot;^mesos://&amp;quot;, &amp;quot;&amp;quot;)  // Strip initial mesos://
                                        val backend = if (coarseGrained) {
                                                new CoarseMesosSchedulerBackend(scheduler, this, masterWithoutProtocol, appName)
                                        } else {
                                                new MesosSchedulerBackend(scheduler, this, masterWithoutProtocol, appName)
                                        }
                                scheduler.initialize(backend)
                                        scheduler
                }
}
        taskScheduler.start()
        @volatile private var dagScheduler = new DAGScheduler(taskScheduler)
        dagScheduler.start()
ui.start()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SparkContext初始化过程当中，按照配置，分别初始化
- TaskScheduler：任务调度
- DAGScheduler：任务生成
- UI：提供监控视图&lt;/p&gt;

&lt;p&gt;完成以上工作之后，SparkContext就已经提供了任务管理所需要的全部重要功能。&lt;/p&gt;

&lt;h2&gt;任务生成&lt;/h2&gt;

&lt;p&gt;在分析任务生成的具体流程之前，需要先了解RDD(Resilient Distributed Dataset)到底抽象了什么东西。最初的paper上面，是这么阐述的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We present Resilient Distributed Datasets (RDDs), a dis-
tributed memory abstraction that lets programmers per-
form in-memory computations on large clusters in a
fault-tolerant manner. RDDs are motivated by two types
of applications that current computing frameworks han-
dle inefficiently: iterative algorithms and interactive data
mining tools.&lt;/p&gt;

&lt;p&gt;/**
 * A Resilient Distributed Dataset (RDD), the basic abstraction in Spark. Represents an immutable,
 * partitioned collection of elements that can be operated on in parallel. This class contains the
 * basic operations available on all RDDs, such as &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;persist&lt;/code&gt;. In addition,
 * [[org.apache.spark.rdd.PairRDDFunctions]] contains operations available only on RDDs of key-value
 * pairs, such as &lt;code&gt;groupByKey&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;; [[org.apache.spark.rdd.DoubleRDDFunctions]] contains
 * operations available only on RDDs of Doubles; and [[org.apache.spark.rdd.SequenceFileRDDFunctions]]
 * contains operations available on RDDs that can be saved as SequenceFiles. These operations are
 * automatically available on any RDD of the right type (e.g. RDD[(Int, Int)] through implicit
 * conversions when you &lt;code&gt;import org.apache.spark.SparkContext._&lt;/code&gt;.
 *
 * Internally, each RDD is characterized by five main properties:
 *
 *  - A list of partitions
 *  - A function for computing each split
 *  - A list of dependencies on other RDDs
 *  - Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)
 *  - Optionally, a list of preferred locations to compute each split on (e.g. block locations for
 *    an HDFS file)
 *
 * All of the scheduling and execution in Spark is done based on these methods, allowing each RDD
 * to implement its own way of computing itself. Indeed, users can implement custom RDDs (e.g. for
 * reading data from a new storage system) by overriding these functions. Please refer to the
 * [[&lt;a href=&quot;http://www.cs.berkeley.edu/%7Ematei/papers/2012/nsdi_spark.pdf&quot;&gt;http://www.cs.berkeley.edu/~matei/papers/2012/nsdi_spark.pdf&lt;/a&gt; Spark paper]] for more details
 * on RDD internals.
 */&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大致翻译过来的意思是说，RDD是为适用于大型的分布式迭代计算和交互数据挖掘构想的in-memory的数据抽象，根据此类计算需求的特征，抽象出RDD五个主要属性。并提供两类operation，分别是transformation和action，输出类型还是RDD的operation定义为transformation，其他的是action。更多RDD的细节，在后面的分析中会进一步设计。这里需要先知道的是，Spark的任务生成，真正的触发是action类型的RDD操作。&lt;/p&gt;

&lt;p&gt;回到之前的栗子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val count = spark.parallelize(1 to n, slices).map { i =&amp;gt;
        val x = random * 2 - 1
                val y = random * 2 - 1
                if (x*x + y*y &amp;lt; 1) 1 else 0
}.reduce(_ + _)
···

栗子里面，有三瓣肉，分别是
* parallelize
* map
* reduce

其中parallellize和map是transformation，reduce是action。transformation我们暂时不理，重点观察reduce操作

···
/**
 * Reduces the elements of this RDD using the specified commutative and associative binary operator.
 */
def reduce(f: (T, T) =&amp;gt; T): T = {
        val cleanF = sc.clean(f)
                val reducePartition: Iterator[T] =&amp;gt; Option[T] = iter =&amp;gt; {
                        if (iter.hasNext) {
                                Some(iter.reduceLeft(cleanF))
                        } else {
                                None
                        }
                }
        var jobResult: Option[T] = None
                val mergeResult = (index: Int, taskResult: Option[T]) =&amp;gt; {
                        if (taskResult != None) {
                                jobResult = jobResult match {
                                        case Some(value) =&amp;gt; Some(f(value, taskResult.get))
                                                case None =&amp;gt; taskResult
                                }
                        }
                }
        _sc.runJob(this, reducePartition, mergeResult)_
                // Get the final result out of our Option, or throw an exception if the RDD was empty
                jobResult.getOrElse(throw new UnsupportedOperationException(&amp;quot;empty collection&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;runJob的具体实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Run a function on a given set of partitions in an RDD and pass the results to the given
 * handler function. This is the main entry point for all actions in Spark. The allowLocal
 * flag specifies whether the scheduler can run the computation on the driver rather than
 * shipping it out to the cluster, for short actions like first().
 */
def runJob[T, U: ClassManifest](
                rdd: RDD[T],
                func: (TaskContext, Iterator[T]) =&amp;gt; U,
                partitions: Seq[Int],
                allowLocal: Boolean,
                resultHandler: (Int, U) =&amp;gt; Unit) {
        val callSite = Utils.formatSparkCallSite
                logInfo(&amp;quot;Starting job: &amp;quot; + callSite)
                val start = System.nanoTime
                val result = dagScheduler.runJob(rdd, func, partitions, callSite, allowLocal, resultHandler,
                                localProperties.get)
                logInfo(&amp;quot;Job finished: &amp;quot; + callSite + &amp;quot;, took &amp;quot; + (System.nanoTime - start) / 1e9 + &amp;quot; s&amp;quot;)
                rdd.doCheckpoint()
                result
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里开始，进入DAGScheduler内部，正式开始任务生成操作
DAGScheduler中生成任务分成两个部分，第一个部分是封装job的各种属性到一个JobSubmit对象，保存到一个Queue里面，并持有一个JobWaiter对象，等待job执行完毕。另一部是DAGScheduler定时检查Queue，进行任务的实际生成流程。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private def run() {
        SparkEnv.set(env)

                while (true) {
                        val event = eventQueue.poll(POLL_TIMEOUT, TimeUnit.MILLISECONDS)
                                if (event != null) {
                                        logDebug(&amp;quot;Got event of type &amp;quot; + event.getClass.getName)
                                }
                        this.synchronized { // needed in case other threads makes calls into methods of this class
                                if (event != null) {
                                        if (processEvent(event)) {
                                                return
                                        }
                                }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，Job的划分流程，氛围几个阶段
* 生成Stage
* 生成Task&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case JobSubmitted(finalRDD, func, partitions, allowLocal, callSite, listener, properties) =&amp;gt;
val jobId = nextJobId.getAndIncrement()
val finalStage = newStage(finalRDD, None, jobId, Some(callSite))
val job = new ActiveJob(jobId, finalStage, func, partitions, callSite, listener, properties)
clearCacheLocs()
logInfo(&amp;quot;Got job &amp;quot; + job.jobId + &amp;quot; (&amp;quot; + callSite + &amp;quot;) with &amp;quot; + partitions.length +
                &amp;quot; output partitions (allowLocal=&amp;quot; + allowLocal + &amp;quot;)&amp;quot;)
logInfo(&amp;quot;Final stage: &amp;quot; + finalStage + &amp;quot; (&amp;quot; + finalStage.name + &amp;quot;)&amp;quot;)
logInfo(&amp;quot;Parents of final stage: &amp;quot; + finalStage.parents)
logInfo(&amp;quot;Missing parents: &amp;quot; + getMissingParentStages(finalStage))
if (allowLocal &amp;amp;&amp;amp; finalStage.parents.size == 0 &amp;amp;&amp;amp; partitions.length == 1) {
        // Compute very short actions like first() or take() with no parent stages locally.
        runLocally(job)
} else {
        listenerBus.post(SparkListenerJobStart(job, properties))
                idToActiveJob(jobId) = job
                activeJobs += job
                resultStageToJob(finalStage) = job
                submitStage(finalStage)
}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Cassandra 2.0新特性</title>
   <link href="http://jackjhy.github.io/2013/10/08/cassandra-20"/>
   <updated>2013-10-08T00:00:00+08:00</updated>
   <id>http://jackjhy.github.io/2013/10/08/cassandra-20</id>
   <content type="html">&lt;p&gt;新的2.0版本主要在CQL，安全性，和性能三個方面做改善和增強。CQL規範發行的大版本3.1.0。2.0版本的主要功能清單：&lt;br&gt;
-   輕量級事務支持
-   觸發器&lt;br&gt;
    第一階段支持編程方式實現的表級別上出發的數據集運算，不管是不是在數據庫集羣上運行（which runs either inside or outside a database cluster）
-   CQL語言級別的分頁支持
    CQL協議2的原生支持，自動估計是否需要對select語句返回的結果集合採用token分頁支持。舉個栗子，2.0和之前的分頁對比&lt;img src=&quot;www.datastax.com/documentation/cassandra/2.0/webhelp/cassandra/images/cursors.png&quot; alt=&quot;&quot;&gt;
-   PreparedStatement支持
-   認證增強
    sasl支持
-   支持列刪除Drop
-   支持Select列別名
-   DDL支持create和drop使用條件判定if (not) exists
-   索引增強
-   性能增強
        -   partition summary移到stack外面&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello Tiger Ji</title>
   <link href="http://jackjhy.github.io/2013/09/25/hello-tiger-ji"/>
   <updated>2013-09-25T00:00:00+08:00</updated>
   <id>http://jackjhy.github.io/2013/09/25/hello-tiger-ji</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://jackjhy.github.io/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://jackjhy.github.io/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&amp;#39;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;h3&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;quot;a simple, blog aware, static site generator&amp;quot;.&lt;/p&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, 
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
&lt;li&gt;No internet connection required.&lt;/li&gt;
&lt;li&gt;Ability to publish via git.&lt;/li&gt;
&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately 
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&amp;#39;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br&gt;
Stores configuration data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br&gt;
This folder is for partial views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;&lt;br&gt;
This folder is for the main templates your content will be inserted into.
You can have different layouts for different pages or page sections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br&gt;
This folder contains your dynamic content/posts.
the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br&gt;
This is where the generated site will be placed once Jekyll is done transforming it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br&gt;
This folder is not part of the standard jekyll structure.
The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &amp;quot;objects&amp;quot; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;&lt;br&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. 
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;&lt;br&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&amp;#39;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;&lt;br&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &amp;quot;set&amp;quot;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;quot;lessons/beginner&amp;quot;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&amp;#39;t find &amp;quot;lessons&amp;quot; and &amp;quot;beginner&amp;quot; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#39;s or post&amp;#39;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br&gt;
Templates should be coded in HTML and contain YAML Front Matter. 
All templates can contain Liquid code to work with your site&amp;#39;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;sidebar&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they 
define another &amp;quot;root&amp;quot; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files 
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data. &lt;/p&gt;

&lt;h3&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. 
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&amp;#39;t do jackshit in liquid that hasn&amp;#39;t been allowed explicitly by the implementation.
What&amp;#39;s more you can only access data-structures that have been explicitly passed to the template. &lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#39;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. 
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to 
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;&lt;br&gt;
My personal stance is to not invest time trying to hack liquid. It&amp;#39;s really unnecessary
&lt;em&gt;from a programmer&amp;#39;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&amp;#39;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files. &lt;/p&gt;

&lt;h2&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;&lt;br&gt;
This is done with textile or markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;&lt;br&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;&lt;br&gt;
These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;&lt;br&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through 
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#39;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#39;s job is to generate a static representation of your website. 
The following is an outline of how that&amp;#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;&lt;br&gt;
Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;&lt;br&gt;
Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one 
big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
At this stage your site is one big computed ruby object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br&gt;
Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;quot;liquified&amp;quot;.&lt;br&gt;
&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;&lt;br&gt;
Finally the liquid templates are &amp;quot;rendered&amp;quot;, thereby processing any liquid syntax provided in the templates
and saving the final, static representation of the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to 
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#39;ll iterate through and format 
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; 
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&amp;#39;d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>